import java.util.Scanner;
import java.util.regex.Matcher;// Для работы с регулярными выражениями
import java.util.regex.Pattern; // Для определения регулярных выражений

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Input:");
        String input = scanner.nextLine();

        try {
            String result = evaluateExpression(input);
            if (result.length() > 40) {
                result = result.substring(0, 40) + "...";
            }
            System.out.println("Output: " + result);
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    private static String evaluateExpression(String expression) throws Exception {
        // Проверка на правильный формат
        Pattern pattern = Pattern.compile("\"([^\"]{1,10})\"\\s*([+\\-*\\/])\\s*\"?([^\"]{0,10})\"?");
        Matcher matcher = pattern.matcher(expression);

        if (!matcher.matches()) {
            throw new Exception("Invalid format.");
        }

        String firstStr = matcher.group(1); // Первая строка
        String operation = matcher.group(2); // Оператор
        String secondStr = matcher.group(3); // Вторая строка или число

        switch (operation) {
            case "+":
                return firstStr + secondStr;

            case "-":
                return firstStr.replace(secondStr, "");

            case "*":
                int times = parseInteger(secondStr);
                validateRange(times);
                return repeatString(firstStr, times);

            case "/":
                int length = parseInteger(secondStr);
                validateRange(length);
                return firstStr.substring(0, Math.min(firstStr.length(), length));

            default:
                throw new Exception("Unknown operation.");
        }
    }

    private static int parseInteger(String value) throws Exception {
        try {
            return Integer.parseInt(value);
        } catch (NumberFormatException e) {
            throw new Exception("Число должно быть целое между 1 и 10.");
        }
    }

    private static void validateRange(int number) throws Exception {
        if (number < 1 || number > 10) {
            throw new Exception("Число должно быть между 1 и 10.");
        }
    }

    private static String repeatString(String input, int times) {
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < times; i++) {
            result.append(input);
        }
        return result.toString();
    }
}
